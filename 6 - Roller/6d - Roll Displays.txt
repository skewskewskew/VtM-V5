/*
################################################################################
## DISPLAYS ####################################################################


--------------------------------------------------------------------------------
-- Display: List ---------------------------------------------------------------

0: .list.of.items.to.display, normally one of the global items
this may seem odd. this is odd, but it's expandable

*/

&display.list [v( d.nr )]=
	iter( rest( %0, . ), %i0, ., . )


/*
--------------------------------------------------------------------------------
-- Display: Roll Items ---------------------------------------------------------

0: `+list`-of`+items (grabbed probably from %qo or %qe)
outputs: Something legible (i.e., "Error Error Error")

*/

&display.roll-items [v( d.nr )]=
	iter( 
		trim( trim( %0, b, ` ), b, + ), 
		pedit( trim( %i0, b ), +, %b+%b, -, %b-%b ), 
		`, 
		@@( null )
	)


/*
--------------------------------------------------------------------------------
-- Display: Colorize Dice ------------------------------------------------------

Would be much easier with regpedit().

Hilite a standard success.
Hilite a chance roll of '1'.
Hilite '1' on a weakness roll, unless it's rote from the first section
(As a '1' weakness gets re-rolled for rote, we don't want to hilite it.)

*/

&display.colorize.dice [v( d.nr )]= 
	localize( 
		strcat( 
			setq( c, strmatch( %qs, chance )), 
			setq( w, u( f.hasswitch?, weakness )), 
			setq( r, u( f.hasswitch?, rote )), 
			iter( %0, 
				iter( %i0, 
					case( 1, 
						u( f.successes.standard, %i0, 8 ), 
						%xu%xc%i0%xn, 

						cand( eq( %i0, 1 ), %qc ), 
						%xr%i0%xn, 

						cand( 
							%qw, 
							eq( %i0, 1 ), 
							cor( not( %qr ), gt( inum( 1 ), 1 ))
						), 
						%xr%i0%xn, 

						%i0 
					)
				), 
				:, : 
			)
		)
	)

/* -- Tests -- 

think u( v( d.nr )/display.colorize.dice, 7 3 10 2 10 1 8 3 2 4 9 4 )

think [setq( z, /weakness )][iter( 7 3 10 2::10 1, u( v( d.nr )/display.colorize.dice, %i0 ), :, : )]

think [null( u( v( d.nr )/f.roll.workhorse, str+dex+2, %#, /9-again/rote/extended ))][iter( %qr, iter( %i0, u( v( d.nr )/display.colorize.dice, %i0 ), :, : ), |, | )]

think [null( u( v( d.nr )/f.roll.workhorse, 0, %#, /extended=5 ))][iter( %qr, iter( %i0, u( v( d.nr )/display.colorize.dice, %i0 ), :, : ), |, | )]

think [null( u( v( d.nr )/f.roll.workhorse, str+dex+2, %#, /ext/targ=200 ))][iter( %qr, iter( %i0, u( v( d.nr )/display.colorize.dice, %i0 ), :, : ), |, | )] --> %qe

think u( v( d.nr )/display.colorize.dice, 2 4 10 9 3 5 10 6 3 3 8 1 3 7 8 8 6 7 10 3 8 2 10 7 5 9 )



================================================================================
== DISPLAY: Main Spammy Output =================================================


--------------------------------------------------------------------------------
-- Display: Roll Output --------------------------------------------------------

0: dbref of roller
1: "public" or "private" or "hidden" or "job <num>"
2: dbref of target

q0: latest counted successes -- from f.roll-success-interpreter
q1: prettified success output ("success!") -- from success-interpreter
q2: prettified display roll output (what rolled) -- from success-interpreter

qd: dice rolled (massaged to '0' if < 0 )
qa: n-again (massaged to 'No' if > 10)

relies upon global registers
uses: header(), footer()

*/

&display.roll-output [v( d.nr )]=
	localize( strcat( 
		setq( w, width( %2 )), 

// .. interpret roll results from global registers
		u( f.roll-success-interpreter ), 
//		debug :: q0: %q0 --- q1: %q1 --- q2: %q2, %r, 
// .. massage the registers a bit; from here on out they're just for displays
		if( lte( %qd, 0 ), setq( d, 0 )), 
		if( gte( %qa, 11 ), setq( a, No )), 

// >> display!
// .. header, don't display obvious defaults
		header( 
			strcat( 
				%N rolls %qd Dice, 
				if( strmatch( %qs, Standard ), , %b- %qs ), 
				if( strmatch( %qa, 10 ), , %b- %qa-Again )
			), 
			%qw 
		), %r, 

// .. what are we rolling?
		%b Roll:%b, 
		trim( wrap( %q2, sub( %qw, 6 ), l, , , 8 ), r, %b ), %r, 

// .. what are the results?
		case( 1, 

// .. >> extended roll: <Total> %r%r <each roll>, and change %q1
			strmatch( %q1, Extended ), 
			u( display.roll-output.extended ), 

// .. >> single roll: show "Result: <success?> -- <dice rolled>
			u( display.roll-output.single )

		), %r, 

// .. footer, reminds us success/failure, and whom to
		footer( 
			strcat( 
				trim( lcstr( before( %q1, %( ))), 
				if( t( %1 ), %b(%1) )
			), 
			%qw 
		)
	))


/*
--------------------------------------------------------------------------------
-- Display: Roll Output, Extended ----------------------------------------------

Show the 'extended' roll results, line by line

*/

&display.roll-output.extended [v( d.nr )]=
	localize( 
		strcat( 
			%b Results:%b, 
			ladd( %qc ), %b, total successes, %r%r, 
			iter( %qr, 
				strcat( 
					%b Successes:, %b, 
					setr( x, max( extract( %qc, inum( ), 1 ), -1 )), 
					%b, --, %b, u( display.interpret-roll-output, %i0 ), 
// .. .. .. report dramatic failure only; exc. succ was confusing people
					switch( %qx, -1, %b%(dramatic failure%) )
				), 
				|, %r 
			)
		)
	)


/*
--------------------------------------------------------------------------------
-- Display: Roll Output, Single ------------------------------------------------

Output for a single (non-extended) roll

*/

&display.roll-output.single [v( d.nr )]=
	cat( 
		%b, 
		Result:, 
		trim( 
			wrap( %q1 -- [u( display.interpret-roll-output, %qr )], 
				sub( width( %# ), 10 ), l, , , 10 
			), 
			r, %b 
		)
	)


/*
--------------------------------------------------------------------------------
-- Display: Interpret Roll Output ----------------------------------------------

Give it that '(<dice rolled)' look.

*/

&display.interpret-roll-output [v( d.nr )]=
	localize( 
		strcat( 
			setq( 9, u( display.colorize.dice, %0 )), 
			%(, 
			trim( elementsmux( %q9, 1 3, :, )), 
			if( 
				t( setr( 8, trim( elementsmux( %q9, 2, :, )))), 
				%, Rote: %q8
			), 
			%) 
		)
	)


/*
--------------------------------------------------------------------------------
-- Display: Roll To Public -----------------------------------------------------

Sample input: u( display.roll-to-public, %#, #80 #74))

Output: u( display.roll-output, #74, public, #74  )

*/

&display.roll-to-public [v( d.nr )]=
	iter( %1, 
		pemit( %i0, u( display.roll-output, %0, public, %i0  )), 
		, @@( null )
	)

/*
--------------------------------------------------------------------------------
-- Display: Roll To Private ----------------------------------------------------
*/

&display.roll-to-private [v( d.nr )]=
	iter( %1, 
		pemit( %i0, 
			u( display.roll-output, 
				%0, 
				to [iter( %1, name( %i0 ), , %,%b )], 
				%i0 
			)
		)
	)


/*
--------------------------------------------------------------------------------
-- Display: Roll To Blind ------------------------------------------------------

'Blind' is a roll-to-private without the roller involved. 
Because of this, we return the message that's to be sent to the roller.
+roll will then send this on

*/

&display.roll-to-blind [v( d.nr )]=
	strcat( 
		u( display.roll-to-private, %0, %1 ), 
		u( display.blind-roller-output, %1 )
	)


/*
--------------------------------------------------------------------------------
-- Display: Blind Roll Output --------------------------------------------------

A very quick 'you roll xxx to yyy' 
inputs:
	0: list of dbrefs being rolled to 
	qo: skill listing
	qz: list of switches
	qs: which roll system to use (standard, weakness, chance)

internal:
	q0: hasswitch target?, later a list of switches
	q1: hasswitch extended?

*/

&display.blind-roller-output [v( d.nr )]=
	squish( 
		strcat( 
			u( .alert, roll/blind ), %b, 
			You roll, %b, 

// chance/weakness and/or extended?
			itemize( 
				cat( 
					if( not( strmatch( %qs, standard )), 
						lcstr( %qs )
					), 
					if( 
						or( 
							setr( 0, u( f.hasswitch?, target )), 
							setr( 1, u( f.hasswitch?, extended ))
						), 
						extended
					)
				), 
				, & 
			), %b, 

// if extended, output how it's extended
			if( 
				cor( %q0, %q1 ), 
				strcat( 
					%(, 
					if( %q0, target %qt ), 
					if( cand( %q0, %q1 ), %,%b ), 
					if( %q1, %qn rolls ), 
					%) 
				)
			), %b, 

// output the roll
			', trim( u( display.roll-items, %qo )), ', 
		

// switches? (ignore the two extended switches, pulled earlier)
			setq( 0, 
				trim( 
					pedit( 
						rest( %qz, / ), 
						grab( %qz, extended*, / ), @@( null ), 
						grab( %qz, target*, / ), @@( null )
					), 
					b, / 
				)
			), 
			if( strlen( %q0 ), 
				strcat( 
					%, using, %b, 
					iter( %q0, '%i0', /, %,%b ), %b 
				)
			), 

// roll to whom?
			%b, to, %b, 
			iter( %0, name( %i0 ), , %,%b )
		)
	)


/*
--------------------------------------------------------------------------------
-- Display: Roll To Job --------------------------------------------------------

I didn't take these notes when I created this system, so some of it might 
be incorrect.

--

For %va/trig_add: 
	0: dbref of job object (Job 6 -> #491), returned by 'f.has_jobs_access'
	1: content
	2: dbref of the person causing the change
	3: the act upon the object (CREate, ADD, NAMe, ASN-assign, MAIL, etc)

For the following:
	0: enactor dbref (probably %#)
	1: Job <n>

uses: titlestr()

*/

&display.roll-to-job [v( d.nr )]=
	case( 0, 
// .. job access check failed
		t( setr( 9, ulocal( f.has_job_access, rest( %1 ), %0 ))), 
		u( .msg, roll, You can't roll to that job because [rest( %q9 )] ), 

// .. else, show enactor and add it to the job
		strcat( 
			ulocal( display.roll-output, %0, to %1 ), 
			trigger( %va/trig_add, 
				%q9, 
				%r[ulocal( display.roll-output, %0, to %1, %! )], 
				%0, 
				ADD 
			), 
// .. trigger the jobs system to inform people who can see the bucket
			trigger( %va/trig_broadcast, 
				%q9, 
				Roll added to [lcstr( %1 )] by [name( %0 )]. 
			)
		)
	)

/*
--------------------------------------------------------------------------------
-- Has Jobs Access? ------------------------------------------------------------

Does the target have write access to the job number passed?
(Code cribbed directly from +myjob/add.)

0: job number
1: target dbref
return: #-1 <error>, or job number's dbref for 'okay'

*/

&f.has_job_access [v( d.nr )]=
	localize( case( 0, 
		not( u( %va/FN_GUEST, %1 )), 
		#-1 This command is not available to guests, 

		isdbref( setr( 0, u( %va/FN_FIND-JOB, %0 ))), 
		#-1 That is an invalid job number, 

		cor( 
			cand( 
				u( %va/IS_PUBLIC, %q0 ), 
				match( get( %q0/OPENED_BY ), %1 )
			), 
			u( %va/FN_MYACCESSCHECK, parent( %q0 ), %1, %q0 ),  
		), 
		#-1 [name( %q0 )] is not yours%; you can only modify your own jobs, 

		not( u( %va/FN_HASATTR, %q0, LOCKED )), 
		#-1 That job is locked and cannot be changed at this time, 
		
		%q0 
	))



/*
================================================================================
== Success Interpreter =========================================================

One part display, one part success counter.
Not convinced this should go under "roll displays".

input:
	qd: number of dice to roll
	qs: roll type ('standard' by default)
	qr: final rolls, |-delimited
	qc: final success counter, space-delimited
	
output:
	q0: successes <-- depreciated for %qc
	q1: success/failure type
	q2: input, prettified 

*/

&f.roll-success-interpreter [v( d.nr )]=
	strcat( 

// q1: success/failure type
		setq( 1, 
			if( gt( words( %qr, | ), 1 ), 
				Extended, 
				switch( ladd( %qc ), 
					<0, Dramatic Failure, 
					<1, Failure, 
					<5, Success %(%qc%), 
					Exceptional Success! %(%qc%)
				)
			)
		), 

// q2: display style for the inputs (or the error(s)?)
		setq( 2, trim( u( display.roll-items, %qo )))

	)
