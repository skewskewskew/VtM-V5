/*
ROLLER 3.0


================================================================================
== SETUP =======================================================================
*/

@create nWoD Roller <nr>
@fo me=&d.nr me=[num( nWoD Roller <nr> )]
@set nWoD Roller <nr>=safe inherit

@fo me=@parent nWoD Roller <nr>=[v( d.codp )]



/*
================================================================================
== DATA ========================================================================
*/

@fo me=&d.stat-setter [v( d.nr )]=search( name=Stat Functions Prototype <sfp> )
@fo me=&d.data-dictionary [v( d.nr )]=search( name=Data Dictionary <dd> )

@fo me=&d.spend-regain [v( d.nr )]=search( name=Pool Spend Regain System <psrs> )

@fo me=&d.jobs [v( d.nr )]=search( name=Job Global Object <JGO> )
@fo me=@va [v( d.nr )]=[get( get( v( d.nr )/d.jobs )/va )]



/*
================================================================================
== CROSS-PLATFORM FUNCTIONS ====================================================
*/

&.sign [v( d.nr )]=
	case( 1, 
		strmatch( %0, #-* ), %0, 
		strmatch( %0, -* ), -, 
		+ 
	)

// --

&.value_full [v( d.nr )]=ulocal( [u( d.data-dictionary )]/.value_full, %0, %1 )

// --

&.class [v( d.nr )]=ulocal( [u( d.data-dictionary )]/.class, %0 )

// --

&.statpath [v( d.nr )]=
	ulocal( 
		[u( d.stat-setter )]/f.statpath.workhorse, 
		%0, %1 
	)

// --

&.statname [v( d.nr )]=
	ulocal( 
		[u( d.stat-setter )]/f.statname.workhorse, 
		%0 
	)

// --

&.hastag? [v( d.nr )]=
	ulocal( 
		[u( d.stat-setter )]/f.hastag?.workhorse, 
		%0, %1, strmatch( %2, a* )
	)

// --

&.alert [v( d.nr )]=ansi( h, <%0> )
&.msg [v( d.nr )]=ansi( h, <%0>, n, %b%1 )

// --

&.crumple [v( d.nr )]=trim( squish( %0, %1 ), b, %1 )



/*
================================================================================
== CORE ROLLER =================================================================

The n-again checker does not care about any rules, it just sees how many are x 
or higher and returns that. You know, to be honest, this is precisely the same 
as the plain success checker.


--------------------------------------------------------------------------------
-- Roller: Base Code -----------------------------------------------------------

0: number of dice to roll
1: n-again
2: success on 'x' or higher (only include if roll is rote!!!)
output: <base roll>:<rote re-roll, if exists>:<n-again roll>

*/

&f.roller [v( d.nr )]=
	strcat( 
		setr( 0, lrand( 1, 10, %0 )), :, 

		setr( 1, 
			lrand( 1, 10, 
				sub( words( %q0 ), u( f.n-again-check, %q0, %2 ))
			)
		), :, 

		trim( u( f.roller.recursive, %q0 %q1, %1 ))

	)


/*
--------------------------------------------------------------------------------
-- Roller: Recursive -----------------------------------------------------------
*/

&f.roller.recursive [v( d.nr )]=
		if( 
			setr( 2, u( f.n-again-check, %0, %1 )), 
			cat( 
				setr( 3, lrand( 1, 10, %q2 )), 
				ulocal( f.roller.recursive, %q3, %1 )
			)
		)


/*
--------------------------------------------------------------------------------
-- Roller: N-Again Check -------------------------------------------------------

counts standard successes or dice to re-roll

0: list of dice roll results
1: min value to check for
returns: number of dice that are %1 or higher

*/

&f.n-again-check [v( d.nr )]=
	words( regraball( %0, [lnum( %1, 11, | )]))



/*
================================================================================
== SUCCESS COUNTERS ============================================================


--------------------------------------------------------------------------------
-- Successes: Plain ------------------------------------------------------------

0: dice rolled (<base>:<rote>:<n-again>)
1: target # to meet/beat (usually 8)

*/

&f.successes.standard [v( d.nr )]=
	u( f.n-again-check, pedit( %0, :, %b ), %1 )


/*
--------------------------------------------------------------------------------
-- Successes: Chance Roll ------------------------------------------------------

"chance" means 1 die rolled, but this system auto-detects that

0: dice rolled (<base>:<rote>:<n-again>)
1: target # to meet/beat (usually 8)

qs: (global) type of roll this is
    (for chance rolls, weakness rolls at most 1 die, so we don't switch here)

returns: number of successes, -1 or f.successes.standard

*/

&f.successes.chance [v( d.nr )]=
	if( eq( first( %0, : ), 1 ), -1, u( f.successes.standard, %0, 10 ))


/*
--------------------------------------------------------------------------------
-- Successes: Weakness ---------------------------------------------------------

"weakness" is from nWoD Vampire, counting a 1 as a "negative success"

0: list of dice roll results
1: min value to count as a success (in nWoD, usually 8)
returns: number of successes (weakness cannot cause critical failure)

*/

&f.successes.weakness [v( d.nr )]=
	max( 0, 
		sub( 
			u( f.successes.standard, %0, %1 ), 
// .. don't count 1's in <base> roll /if/ there is a <rote> section
			if( strlen( elementsmux( %0, 2, : )), 
				words( graball( pedit( rest( %0, : ), :, %b ), 1 )), 
				words( graball( pedit( %0, :, %b ), 1 ))
			)
		)
	)


/*
--------------------------------------------------------------------------------
-- Tests -----------------------------------------------------------------------

think u( v( d.nr )/f.roller, 3, 10 )
think u( v( d.nr )/f.roller, 3, 10, 8 )


think [setr( d, u( v( d.nr )/f.roller, 10, 10 ))] >> [u( v( d.nr )/f.successes.standard, %qd, 8 )]

think [setr( d, u( v( d.nr )/f.roller, 1, 10 ))] >> [u( v( d.nr )/f.successes.chance, %qd, 8 )]

think [setr( d, u( v( d.nr )/f.roller, 10, 10 ))] >> [u( v( d.nr )/f.successes.weakness, %qd, 8 )]

*/
