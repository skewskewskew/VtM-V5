/*
################################################################################
## STATPATH FUNCTIONS ##########################################################

In order to determine how to store a trait, we first have to determine what 
that trait looks like. This is the stat-path, which is the lynchpin of the 
entire system.

This relies heavily on the 'type search order' up in the setup and data file.

As mentioned in the introduction, the statpath comes in two forms: the data
dictionary (without trait instance) and the sheet (may have instance).

That is, 'merit.language_()' on the data dictionary is the source of 
'_merit.language_(french)' on the character sheet.

** Subsheets **

Subsheet storing will need to have the subsheet data first. 
i.e., a subsheet named 'mary':
	&_mary!merit.resources: 2

We cannot use the ':' character in attribute names, though ':' will still be 
used for user accessing of sub-sheets, such as 'thenomain:mary/resources'.



================================================================================
== LIST STATS (SELECTED) =======================================================

Not only does this list the "valid search order" stats, but those not as well.
To list all, pass * or null.
To find middle matches, pass *<name>* or *<name>

--

0: Partial stat name to search for

--------------------------------------------------------------------------------
*/

&f.stat-list-selected [v( d.sfp )]=
	setunion( 
		iter( 
			[u( d.search-order )] [v( d.type.specials )], 
			lattr( [u( d.data-dictionary )]/%i0.%0*)
		), 
	)

// -----------------------------------------------------------------------------
// -- test --

think u( v( d.sfp )/f.stat-list-selected, st )
think u( v( d.sfp )/f.stat-list-selected, *str* )
think u( v( d.sfp )/f.stat-list-selected, *ual_k* )



/*
================================================================================
== FIND SHEET ==================================================================

character sheets might not be on the person they're meant to be on
this is a simple lookup function, in case things are changed

0: dbref of player
returns: dbref of sheet

if the "sheet location" stat is on the passed item, pass that back, 
else assume the sheet is on the player

--------------------------------------------------------------------------------
*/

&f.find-sheet [v( d.sfp )]=
	udefault( %0/_special.sheet_location, %0 )


/*
================================================================================
== STAT INPUT: INSTANCE IS NULL? ===============================================

There is a difference between having no instance and having a null instance
Returns 1 if null instance, else returns 0.

0: stat as entered
Returns: 1 if instance is there but null, 0 otherwise

--------------------------------------------------------------------------------
*/

&f.stat-input-instance-is-null? [v( d.sfp )]=regmatch( %0, .*%\(%\) )



/*
================================================================================
== STATVALUE-GOOD ==============================================================

It occurred to me, a bit late, that I could use a function that does nothing 
but check to see if the value someone is trying to set for a stat is bad. Bad 
values are: 
	`			- because the charsheet uses this as a delimiter

That's it for now.

0: The value
returns: 0 if bad, 1 if good

--------------------------------------------------------------------------------
*/

&f.statvalue-good [v( d.sfp )]=not( strmatch( %0, *`* ))

// -----------------------------------------------------------------------------
// -- test --

think u( v( d.sfp )/f.statvalue-good, blah )

think u( v( d.sfp )/f.statvalue-good, .blah )
think u( v( d.sfp )/f.statvalue-good, blah.blah )
think u( v( d.sfp )/f.statvalue-good, 10.blah )

think u( v( d.sfp )/f.statvalue-good, `blah )
think u( v( d.sfp )/f.statvalue-good, b`lah )
think u( v( d.sfp )/f.statvalue-good, blah` )



/*
================================================================================
== STAT INPUT: BREAK DOWN TO REGISTERS =========================================

0: <stat>[ (<instance>)][.<substat>]
   "<stat>(<instance>)" and "<stat>(<instance>" should both also work
Output: Sets qx, qy, qz -- intended not to be localized!

That is, the proper use of this is to pass in a player-inputted stat
and populate these registers for further processing.

qx: trait
qy: instance
qz: sub-trait/specialty

--------------------------------------------------------------------------------
*/

&f.stat-input-breakdown-registers [v( d.sfp )]=
	[setq( z, squish( pedit( %0, %(, %b%(, %(%b, %(, %b%), %) )))]
	[setq( x, trim( before( before( %qz, . ), %( )))]
	[setq( y, before( rest( before( %qz, . ), %( ), %) ))]
	[setq( z, rest( %qz, . ))]

// -----------------------------------------------------------------------------
// -- test --

think [u( v( d.sfp )/f.stat-input-breakdown-registers, lit( get(foo).yay ))]%qx.%qy.%qz

// -=> get.foo.yay



/*
================================================================================
== STATPATH: VALIDATE NAME =====================================================

This is a much more powerful function than I realized, as it does the following tricks, which we well need:

	* Does not care about instance names.
	* Will return multiple matches with a wildcard: <name>*
	* It will return the above in the searched order

--

Find a stat in the data dictionary (does little checking)

0: stat name searched for
1: instance, if applicable
returns: full.attribute_()
(removes substat; just looks for attribute)

q0: Basic stat
q1: Basic stat search
q2: Outcome of basic stat search
q3: Outcome of literal stat search
q4: Final outcome

qz, qa, qb: Regmatch results

--------------------------------------------------------------------------------
*/

&f.statpath-validate-name [v( d.sfp )]=
	localize( strcat( 

// spaces to underscores
// (and, cheating, ignore the instance)
		[setq( 0, pedit( first( %0, . ), %b, _ ))]

// instanced?
		[setq( 0, 
			if( regmatch( %q0, %(.*%)%\(%(.*%)%\), z a b ), 
				[trim( %qa, b, _ )]_%(%), 
				%q0 
			)
		)]
		[setq( 1, 
			if( strmatch( %q0, *_%(%) ), 
				[before( %q0, _%( )]*_%(%), %q0* 
			)
		)]

// look for all possibilities in data dictionary
// then filter it down and grab it by order
		[setq( 2, 
			sortby( 
				sortby.types, 
				filter( 
					filter.search-types, 
					u( f.stat-list-selected, %q1 )
				)
			)
		)]
	
// (look for literal match FIRST, THEN grab first sorted outcome)
		[setq( 4, 
			if( 
				t( setr( 3, graball( %q2, *.%q0 ))), 
				%q3, 
				first( %q2 )
			)
		)]

// return: did I get anything?
		[if( t( %q4 ), %q4, #-1 STAT NOT FOUND )] 
	))


// -----------------------------------------------------------------------------
// -- Statpath: Validate Name Tests --------------------------------------------

think u( v( d.sfp )/f.statpath-validate-name, stren )
think u( v( d.sfp )/f.statpath-validate-name, lang, fr )
think u( v( d.sfp )/f.statpath-validate-name, court )
think u( v( d.sfp )/f.statpath-validate-name, cour )

think u( v( d.sfp )/f.statpath-validate-name, lang(french) )

think u( v( d.sfp )/f.statpath-validate-name, la* )



/*
================================================================================
== STATPATH: DATA DICTIONARY ===================================================

Use this if we know that the path we're looking for is on the data dictionary 
itself.

Because the "sub-stat" section for List stats is only for lookup, we will return 
only the type.name portion for list stats. (Remember to do the same for sheet, 
below.)

--

0: stat name[ (instance)][.substat]
returns: stat_name[_(instance)][.substat]

qn: Validated (then later, built) stat name
qs: stat dd entry
qc: stat class
qi: instance passed, returned WITH UNDERSCORES
q0, 1: tmp result holders
qx, y, z: stat name, instance, substat to be validated

This version validates from the Data Dictionary ONLY.
MORE PERMISSIVE than statname-lookup-sheet, as * is "anything"
Used for validating new purchases if sheet-lookup fails.

--------------------------------------------------------------------------------
*/

&f.statpath-lookup-dd [v( d.sfp )]=
	strcat( 

// Break down stat into registers x, y, z
		setq( 0, pedit( %0, _, %b )), 
		u( f.stat-input-breakdown-registers, %q0 ), 

// validate stat name:
		if( 
			t( setr( n, u( f.statpath-validate-name, %q0 )) ), 
			strcat( 

// .. get dd entry
				setq( s, u( v( d.data-dictionary )/%qn )), 
// .. get dd entry's "class"
				setq( c, ulocal( f.get-class, %qn )), 

// >> if instance, check dd entry for that instance and if not found, error
// .. we are expecting an instance if validated stat name ends in ()
				if( 
					strmatch( %qn, *_%(%) ), 
					switch( 1, 
// .. .. expecting specific instance, none passed
						match( %qy, ), 
						setq( n, #-2 INSTANCE NOT FOUND ), 
// .. .. instance list is *, return exactly what we were passed, unless 'null'
						strmatch( *, setr( 1, elementsmux( %qs, 2, | ))), 
						setq( n, 
							strcat( 
								before( %qn, _%(%)), 
								_%(, 
								pedit( %qy, %b, _ ), 
								%)
							)
						), 
// .. .. instance list is something else and we can find what was passed on it
						t( setr( 0, grab( %q1, %qy*, . ))), 
						setq( n, 
							strcat( 
								before( %qn, _%(%)), 
								_%(, 
								pedit( %q0, %b, _ ), 
								%)
							)
						), 
// .. .. all other conditions failed: error
						setq( n, #-2 INSTANCE NOT FOUND )
					)
				), 

// >> if substat, check dd entry for that substat and if not found, error
				if( 
					cand( t( %qz ), t( %qn )), 
					switch( 1, 
// .. .. substat-list is *
// .. .. (our dd format shifts the substat-list at instance-list +1)
// .. .. (for dd-lookup, the instance may be null and still valid)
						setr( 1, 
							strmatch( *, 
								setr( 2, 
									elementsmux( 
										%qs, 
										add( 
											2, 
											t( regmatch( %qn, .*%\( .*%\ )))
										), 
										| 
									)
								)
							)
						), 
						setq( n, %qn.[pedit( %qz, %b, _ )] ), 
// .. .. substat-list is an actual list
						t( setr( 0, grab( .%q2, %qz*, . ))), 
						setq( n, %qn.%q0 ), 
// .. .. no matches
						setq( n, #-2 SUBSTAT NOT FOUND )
					)
				)
			)
		), 

// return built stat, or error -- for class:list stats, type.name only
		if( 
			cand( t( %qn ), strmatch( %qc, list )), 
			extract( %qn, 1, 2, . ), 
			%qn 
		)
	)


// -----------------------------------------------------------------------------
// -- Statpath: Data Dictionary Lookup Tests -----------------------------------

think u( v( d.sfp )/f.statpath-lookup-dd, str )
think u( v( d.sfp )/f.statpath-lookup-dd, lang (test) )

think u( v( d.sfp )/f.statpath-lookup-dd, c (su) )
think u( v( d.sfp )/f.statpath-lookup-dd, aca.lib )

think statpath( court )
think statpath( cour )
think statpath( cour(s) )
think statpath( lang () )
think statpath( lang ().ft )

think 
	## [setr( 0, lit( str|l (French)|aca.Library Science|mantle (courtless) ))] 
	%r--> [iter( %q0, u( v( d.sfp )/f.statpath-lookup-dd, ## ), |, %r-->%b )]



/*
================================================================================
== STATPATH: WITHOUT INSTANCE ==================================================

Reverses the statpath process, taking a stat from the sheet and stripping the instance from it. Generally used to then look up things directly on the data dictionary itself.

0: Full statpath
qz: temp holder to grab just the name portion of a stapath

--------------------------------------------------------------------------------
*/

&f.statpath-without-instance [v( d.sfp )]=
	localize( if( regmatchi( %0, %(.*%)%\(.*%\), z z), %qz%(%), %0 ))

// -----------------------------------------------------------------------------
// -- test --

think u( v( d.sfp )/f.statpath-without-instance, 
		u( v( d.sfp )/f.statpath-lookup-dd, lang (sumerian) )
	)

think u( v( d.sfp )/f.statpath-without-instance, statpath( strength ))
think u( v( d.sfp )/f.statpath-without-instance, statpath( cour(sp) ))
think u( v( d.sfp )/f.statpath-without-instance, statpath( lang (spanish) ))



/*
================================================================================
== STATPATH: SHEET =============================================================

Use this when we know (or suspect) the stat we're looking for is on the character's sheet. It's quicker to start with the sheet lookup then, if that doesn't work, check (without instance) on the data dictionary.

YES, LOOKUP-SHEET PRACTICALLY VALIDATES THE STAT ON THE SHEET, BUT NOT ENTIRELY

--

0: player dbref[:sub-sheet]
1: stat name[ (instance)][.substat]
returns: stat path: stat_name[_(instance)][.substat]

qn: Validated stat name
qd: stat's data dictionary entry
qc: class from stat's data dictionary entry
q0: tmp result holder
qx, y, z: stat name, instance, substat to be validated (from another func)

qt: target's sheet
qs: target's subsheet, if passed

NOTE: Instances and Substats on sheet are stored with _ for spaces

*/

&f.statpath-lookup-sheet [v( d.sfp )]=
	strcat( 
// until I can figure out how to have this and lookup-dd work together:
// Break down stat into registers x, y, z
		setq( 0, pedit( %1, _, %b )), 
		u( f.stat-input-breakdown-registers, %q0 ), 
		setq( y, pedit( %qy, %b, _ )), 

		setq( t, u( f.find-sheet, first( %0, : ))), 
		setq( s, if( t( setr( s, rest( %0, : ))), %qs!, )), 

// validate stat name:
		if( 
			setr( q, setr( n, u( f.statpath-validate-name, %q0 ))), 
			strcat( 
				setq( d, get( v( d.data-dictionary )/%qn )), 
				setq( c, ulocal( f.get-class, %qn )), 

// .. validate instance, if any
// .. we are expecting an instance if validated stat name ends in ()
				if( 
					strmatch( %qn, *_%(%) ), 
// .. .. dd lookup, else sheet lookup, else error
					switch( 1, 
// .. .. .. instance nowhere, because it wasn't passed
						match( %qy, ), 
						setq( n, #-2 INSTANCE NOT FOUND ), 
// .. .. .. instance on dd
						t( setr( 0, grab( extract( %qd, 2, 1, | ), %qy*, . ))), 
						setq( n, [before( %qn, _%(%) )]_%(%q0%) ), 

// .. .. .. instance on sheet
						t( setr( 0, 
							lattr( 
								%qt/_%qs[before( %qn, _%(%) )]_%(%qy*%) 
							)
						)), 
						setq( n, rest( %q0, _ )), 
// .. .. .. instance nowhere, because nothing else matched
						setq( n, #-2 INSTANCE NOT FOUND )
					)
				), 

				if( 
					cand( t( %qz ), t( %qn )), 
// .. .. dd lookup, else sheet lookup, else error
					switch( 1, 

						t( setr( 0, 
							grab( extract( %qd, add( 2, t( %qy )), 1, | ), %qz*, . )
						)), 
						setq( n, %qn.%q0 ), 

						t( setr( 0, 
							u( f.statpath.lookup.substats.sheet, 
								%qt, %qs%qn, %qz 
							)
						)), 
						setq( n, %q0 ), 

						setq( n, #-2 SUBSTAT(S) NOT FOUND )
					)
				)
			)
		), 

// return built stat, or error -- for class:list stats, type.name only
		if( 
			cand( t( %qn ), strmatch( %qc, list )), 
			extract( %qn, 1, 2, . ), 
			%qn 
		)
	)

/* 
--------------------------------------------------------------------------------
-- Statpath: Sheet: Substats ---------------------------------------------------

In the Chronicles of Darkness RPG, you can string specialties (a type of substat) together. Here, that would look something like:

	crafts.pottery.clay

In order to do that, we pull out how that works from the core lookup system.
We might as well.

	0: sheet dbref (validated)
	1: [sub-sheet/]class.trait (validated)
	2: list.of.substats (not validated)
	returns: list.of.valid.substats 
*/

&f.statpath.lookup.substats.sheet [v( d.sfp )]=
	localize( strcat( 
		setq( 0, lattr( %0/_%1.* )), 
		setq( 1, 
			iter( u( .crumple, pedit( %2, %b, _ ), . ), 
				u( .grabexact, 
					%q0, _%1.%i0 
				), 
				., . 
			)
		), 
		setq( 2, 
			u( .crumple, 
				pedit( %q1, _%1., ), 
				. 
			)
		), 
		if( t( %q2 ), 
			%q2, 
			#-2 SUBSTAT(S) NOT FOUND 
		)
	))

// -----------------------------------------------------------------------------
// -- Statpath: Sheet Tests ----------------------------------------------------

think u( v( d.sfp )/f.statpath-lookup-sheet, %!, str )
think u( v( d.sfp )/f.statpath-lookup-sheet, %!, c (s) )
think u( v( d.sfp )/f.statpath-lookup-sheet, %!, cont.rep )
think u( v( d.sfp )/f.statpath-lookup-sheet, %!, lang (fr) )

think 
	[setq( 0, lit( str|l (French)|athl.quick r|mantle (sp) ))]
	[setq( 1, pmatch( thenomain ))]
	[iter( %q0, ==> [ljust( %q1/##, 15 )] --> [statname( %q1/## )], |, %r )]

// testing multiple specialties on 'crafts'. Pottery, Poles, and Clay.
// 'ggg' and the multiple dots will be ignored
// (WORKS FROM SHEET ONLY!)

think 
	u( v( d.sfp )/f.statpath-lookup-sheet, 
		%!, 
		crafts...pot.pol.c..ggg... 
	)



/*
================================================================================
== GET CLASS ===================================================================

Get what kind of class a <statpath> is. If only we did this in a more object-oriented manner.

0: full stat path (may include substat!)
returns: class.<statpath> or "numeric" if null

--------------------------------------------------------------------------------
*/

&f.get-class [v( d.sfp )]=
	udefault(
		[u(d.data-dictionary)]/
		class.
		[setr( s, u( f.statpath-without-instance, extract( %0, 1, 2, . )))], 

		udefault( 
			[u( d.data-dictionary )]/
			class.[setr( s, elementsmux( %qs, 1, . ))].?, 
			numeric 
		)
	)

// -----------------------------------------------------------------------------
// -- test --

think u( v( d.sfp )/f.get-class, attribute.strength )
think u( v( d.sfp )/f.get-class, bio.template )
think u( v( d.sfp )/f.get-class, bio.full_name )



/*
================================================================================
== ISCLASS? ====================================================================

Does the class of the stat path match any of the passed parameters?

0: full stat path (may include substat!)
1: space-delimited class types to find
returns: 1 or 0

--------------------------------------------------------------------------------
*/

&f.isclass? [v( d.sfp )]=t(match(%1, ulocal(f.get-class, %0)))

// -----------------------------------------------------------------------------
// -- test --

think u( v( d.sfp )/f.isclass?, attribute.strength, string )
think u( v( d.sfp )/f.isclass?, attribute.strength, numeric string )

think u( v( d.sfp )/f.isclass?, gift.full_moon, list )
