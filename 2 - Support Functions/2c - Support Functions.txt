/*
################################################################################
## FUNCTIONS ABOUT TAGS ########################################################



================================================================================
== List of Stats Based on Tags =================================================

Returns only the stats of a certain category (* for 'all') with a certain tag ('*' for 'don't filter', in which case don't use this function, use lattr(<sheet>/_<category>.*) and leave it at that).

0: dbref of sheet
1: category (may be *)
2: tags.list (all required, if any, for 'mental', etc., * for 'all')
3: 'or' for the default behavior of hastag? (defaults to 'and')

returns: character sheet statpaths

--------------------------------------------------------------------------------
*/

&f.list-stats-tags [v( d.sfp )]=
	filter( 
		fil.list-stats-tags, 
// .. lazy, so turning "_sheet.statpath" into "sheet.statpath" 
// .. so we can use the filter for non-sheet matches
		rest( pedit( lattr( %0/_%1.* ), %b_, %b ), _ ), 
		, 
		, 
		%2, 
		not( strmatch( %3, or ))
	)



/*
================================================================================
== Filter: Does this stat have these tags? =====================================

Filter based on a tags list 
0: stat.path_(with or without instance)
1: tags.to.check.against
2: "0" for or, "1" for and

--------------------------------------------------------------------------------
*/

&fil.list-stats-tags [v( d.sfp )]=
	u( 
		f.hastag?.workhorse, 
		u( f.statpath-without-instance, %0 ), 
		%1, 
		%2
	)


/*
================================================================================
== Filter: Is This Stat One of These Types? ====================================

Probably duplicitous. Filter based on a tags list 

0: stat.path_(with or without instance)
1: types to check against

--------------------------------------------------------------------------------
*/

&fil.list-stats-types [v( d.sfp )]=
	t( match( %1, first( %0, . )))



/*
================================================================================
== Filter: Does This Stat Have One of These Values? ============================

Filter based on values list (value.value 2.value 3)

0: stat.path_(with or without instance)
1: values to check against

--------------------------------------------------------------------------------
*/

&fil.list-stats-values [v( d.sfp )]=
	setunion( 
		get( 
			u( d.data-dictionary )/
			[ulocal( f.statpath-without-instance, %0 )] 
		), 
		%1, 
		. 
	)

// -----------------------------------------------------------------------------
// -- test --
// -- most of these are destined to fail --

think 
	filter( v( d.sfp )/fil.list-stats-tags, 
		trim( pedit( lattr( me/_*.* ), %b_, %b ), b, _ ), , , 
		human 
	)

think 
	filter( v( d.sfp )/fil.list-stats-tags, 
		trim( pedit( lattr( me/_*.* ), %b_, %b ), b, _ ), , , 
		attribute merit 
	)

think 
	[setq( 0, merit )]
	[setq( 1, human )]
	[filter( v( d.sfp )/fil.list-stats-tags, 
		lattr( dd/%q0.* ), , , %q1, not( strmatch( %q2, or ))
	)]


think 
	filter( v( d.sfp )/fil.list-stats-values, 
		trim( pedit( lattr( me/_*.* ), %b_, %b ), b, _ ), , , 4 
	)

think 
	filter( v( d.sfp )/fil.list-stats-values, 
		trim( pedit( lattr( me/_*.* ), %b_, %b ), b, _ ), , , Human 
	)




/*
################################################################################
## PREREQUITE FUNCTIONS ########################################################

We check format, stat path, and roughly check the value. Here we also check 
the types of prerequisites imposed upon us by ourselves in 
&prerequisite.<statpath>, but also by the Storytelling system. I'll try to be 
careful to notate which is which.

These functions do minimal error-checking.

Failed prerequisites should always return #-3 <reason> and be checked after 
value-checking.


================================================================================
== PREREQ: OTHER ===============================================================

We'll start with the most generic of prerequisite checks, stored on 
&prerequisite.<statpath>. The error message when this check fails are pulled 
from &prereq-text.<statpath>

Remember we pass to prerequisite.<statpath> the following:
	0: dbref of sheet
	1: stat.path_no_instance_()
	2: instance of stat, if any
	3: stat-raise (offset) if stat being checked is being raised (used in cg/xp)

returns: 1 if valid, #-3 <reason> if not

p: return for &prerequisite.<statpath>

--------------------------------------------------------------------------------
*/

&f.prereq-check-other [v( d.sfp )]=
	localize( 
		[setq( 
			p, 
			ulocal( [u( d.data-dictionary )]/prerequisite.%1, 
				%0, 
				pedit( %2, %b, _ ), 
				%3 
			)
		)]
		[case( 
			0, 
			comp( %qp, ), 1, 
			%qp, 
			#-3 
			[u( [u( d.data-dictionary )]/prereq-text.%1, 
				%0, 
				pedit( %2, _, %b ), 
				%3 
			)], 

			1
		)]
	)

// -----------------------------------------------------------------------------
// -- test --
// -- these will be hard to check without a sheet --

think 
	u( v( d.sfp )/f.prereq-check-other, 
		pmatch( thenomain ), merit.language_(), spring, 1 
	)

think 
	u( v( d.sfp )/f.prereq-check-other, 
		pmatch( thenomain ), merit.language_(), spring, 5 
	)

think u( v( d.sfp )/f.prereq-check-other, %#, discipline.cruac, , 4 )


/*
================================================================================
== PREREQ: CGEN ================================================================

Some stats are cgen-only. We are not going to enforce this, but add this function to the stat system for completeness.

Please note that unlike other support functions, we're sending the player dbref, not the sheet dbref. Fine-tune this for your own game.

may use zones in the future
0: player dbref
1: full.statpath
returns: 1 if valid, #-1 <reason> if not

--------------------------------------------------------------------------------
*/

&f.prereq-check-cgen [v( d.sfp )]=
	if( 
		cor( 
// .. player is in chargen
			strmatch( loc( %0 ), u( d.chargen )), 
// .. stat is not cg-only
			not( u( f.hastag?.workhorse, %1, chargen-only ))
		), 
		1, 
		#-3 Stat May Only Be Purchased At Character Generation 
	)

// -- test --
// -- NOTE: test won't work until 'hastag?' is in --

think u( v( d.sfp )/f.prereq-check-cgen, pmatch( thenomain ), attribute.presence )
think u( v( d.sfp )/f.prereq-check-cgen, 
		pmatch( thenomain ), merit.encyclopedic_knowledge 
	)



/*
================================================================================
== PREREQ: TEMPLATE ============================================================

I know the stat system as a whole doesn't normally care about this, but to 
validate setstat(), we'll need this.

Templates are only important for the Storytelling (etc) systems, but I can see 
it being used in other systems as well. Say only your Anita Blake Vampires can 
have the Sexy Fangs stat.

Requires the Data Dictionary to have &bio.template, and &tags.<statpath> to 
include the stat. If &tags.<statpath> has no templates in it, then it will be 
considered valid. (So even if you don't use templates, this system won't hurt 
anything, just be extra code.)

See Also: setstat(), where this will be used.

--

0: sheet dbref
1: full.statpath_()
returns: 1 if valid, #-1 <reason> if not

d: data dictionary dbref (we use it that often)
b: bio.template
t: templates used in tags.<statpath>

--------------------------------------------------------------------------------
*/

&f.prereq-check-template [v( d.sfp )]=
	localize( 
		[setq( b, lcstr( u( [u( d.data-dictionary )]/bio.template )))]
		[setq( t, setinter( lcstr( u( [u( d.data-tags )]/tags.%1 )), %qb, . ))]
		[case( 0, 
// .. stat uses no templates, so is valid to all templates
			comp( %qt, ), 1, 
// .. check the intersection of stat's templates with sheet's
			comp( setinter( %qt, lcstr( u( %0/_bio.template )), . ), ), 
			#-3 Stat Not Allowed For This Template, 
// .. no other errors, so 1
			1 
		)] 
	)

// -----------------------------------------------------------------------------
// -- test --

think u( v( d.sfp )/f.prereq-check-template, pmatch( thenomain ), merit.unseen_sense_() )
think u( v( d.sfp )/f.prereq-check-template, pmatch( thenomain ), merit.mantle_() )
think u( v( d.sfp )/f.prereq-check-template, pmatch( thenomain ), attribute.strength )




/*
################################################################################
## PRETTYSTAT FUNCTIONS ########################################################

These functions are designed to help the character sheet make things look 
pretty and neat.



================================================================================
== PRETTYSTAT: NUMBER ==========================================================

This is out of place, but it takes the value and offset of a number, and outputs either stars or a number for that stat, prettified.

0: <base>.<offset>
1: stars?, 1 for stars, 0 for number
output: Either **** or Value, with color representing if offset is + or -

qb: base
qo: offset

--------------------------------------------------------------------------------
*/

&f.pretty-stat-num [v( d.sfp )]=
	localize( switch( 
		[setq( b, first( %0, . ))]
		[setq( o, rest( %0, . ))]
		1, 
// if <value> or <offset> are non-numeric, forget it
		not( cand( isnum( %qb ), cor( isnum( %qo ), not( t( %qo ))))), 
		ansi( hw, %0 ), 
// stars! + offset = wwwhh
		cand( t( %1 ), gte( %qo, 0 )), 
		ansi( 
			w, repeat( o, %qb ), 
			g, repeat( *, %qo )
		), 
// stars! - offset = yyxxx
		cand( t( %1 ), lt( %qo, 0 )), 
		ansi( 
			w, repeat( o, add( %qb, %qo )), 
			hx, repeat(., min( abs( %qo ), %qb ))
		), 
// number! + offset = g
		gt( %qo, 0 ), 
		ansi( ng, add( %qb, %qo )), 
// number! - offset = y
		lt( %qo, 0 ), 
		ansi( hy, add( %qb, %qo )), 
// else, number! + 0 = w
		ansi( w, %0 )
	))

// -----------------------------------------------------------------------------
// -- test ---------------------------------------------------------------------
// 
// this test won't be possible until statname() or statnum() are in, derp.

think 
	[ansi( c, statname( setr( 0, thenomain/str )))] 
	[u( v( d.sfp )/f.pretty-stat-num, setr( 1, getstat( %q0, b )), 1 )] 
	([u( v( d.sfp )/f.pretty-stat-num, %q1 )])

think 
	[ansi( c, statname( setr( 0, thenomain/glam )))] 
	[u( v( d.sfp )/f.pretty-stat-num, setr( 1, getstat( %q0, b )), 1 )] 
	([u( v( d.sfp )/f.pretty-stat-num, %q1 )])

think 
	[ansi( c, statname( setr( 0, thenomain/spee )))] 
	[u( v( d.sfp )/f.pretty-stat-num, setr( 1, getstat( %q0, b )), 1 )] 
	([u( v( d.sfp )/f.pretty-stat-num, %q1 )])

think 
	[ansi( c, statname( setr( 0, thenomain/cont.rep )))] 
	[u( v( d.sfp )/f.pretty-stat-num, setr( 1, getstat( %q0, b )), 1 )]

think u( v( d.sfp )/f.pretty-stat-num, 4, 1 )
think u( v( d.sfp )/f.pretty-stat-num, 4.-1, 1 )
think u( v( d.sfp )/f.pretty-stat-num, 4.+1, 1 )
think u( v( d.sfp )/f.pretty-stat-num, 4 )
think u( v( d.sfp )/f.pretty-stat-num, 4.-1 )
think u( v( d.sfp )/f.pretty-stat-num, 4.+1 )

think 
	iter( str glam spee cont.rep, 
		>> [ansi( g, statname( setr( 0, thenomain/## )))]: 
		[[u( v( d.sfp )/f.pretty-stat-num, setr( 1, getstat( %q0, b )), 1 )]], 
		, %r 
	)




/*
################################################################################
## HELP FILES ##################################################################

These attributes were made for Thenomain's softcode +help file system and are 
left here for reference.

--------------------------------------------------------------------------------

&HELP~stat_topics~+STAT ##Normal +Help##=About Stats~+stat is a multi-functional command that lists information about stats available on the game. It only lists stats available to the players, which are almost all, but not all, stats on +sheet. (XP and health are notable exceptions.) Additionally, the staff version of this command allows staff to set the values on characters.%r%r[ansi(h, +stat)] : Does nothing.%r%r[ansi(h, +stat <stat>)] : Detailed information about <stat>. %r%r[ansi(h, +stat <stat>*)] : List of stats matching the wildcard and their stat category.%r%rFor a list of all stats available, [ansi(h, +stat *)].


&SHELP~STAT_COMMANDS~+STAT ##Staff +Help##=Manipulating Stats~In addition to the commands listed in +help stat, staff may perform the following:%r%r[ansi(h, +stat/template <player>=<template>)] : Sets <player> up with the proper template. Right now we only have Human and Changeling.%r%r[ansi(h, +stat/wipe <player>)] : Wipes all stats from a player's sheet. Spams you with what they were set at. %r%r[ansi(h, +stat/set <player>/<stat> = <value>)] : Set a stat to that value. If value is "default", re-sets to initial and derived value.%r%r[ansi(h, +stat/set <player>/<stat> +|- <value>)] : Increase/decrease a stat by that amount. Numeric stats only.%r%r[ansi(h, +stat/offset <player>/<stat> = <value>)] : Same thing as /set, but plays with the offset. Numeric stats only. + and - also work.%r%r[ansi(h, +stat/override <player>/<stat> = <value>)] : Overrides the entire check system. Set any stat to anything.%r%rFor information about offset and override, see [ansi(h, +shelp setstat%(%))], which this command mainly calls.


&SHELP~CHARGEN~SETSTAT() ##Staff +Help##=Setting the Stat, the Complex Way~[ansi(h, setstat%(<player>/<stat>%, <value>|default%[%, <behavior>%]%))]%r%rThis is the end-result of all other functions and stat code and will do all the validation needed to set almost anything on almost anyone. It won't allow you to set stats in categories that aren't in the search list (such as health), and it will give you a descriptive #-1 error message if it doesn't like what you did. As usual, it will name-complete as much as it can.%r%r> Setting a stat to "default" will set it to the default, if there is one. (Attributes default at "1", derived stats default at their derived formula.) %r%r> Setting the <behavior> to "offset" will, for numeric stats (think pools, including Clarity and Morality), create a temporary boost or decline without destroying the base stat. %r%r> Setting the <behavior> to "override" will ignore the value-check for stats. That is, you can set someone's Strength to "-1", "50", or "peanut brittle".%r%r> Default only works with the permanent stat value. Offset only works with numeric values. You can't override to default, you can't override an offset. If you want to do either of these things, override the entire stat.~[ansi(h, Examples)]%r%r%b think setstat(thenotest/willpo, 5)%r%b think setstat(thenotest/willpo, 2, off)%r%b think setstat(thenotest/willpo, peanut brittle, overr)%r%b think setstat(thenotest/willpo, default)%r%r%b think setstat(thenotest/fleeting summer, 5)


&SHELP~STAT_COMMANDS~+XP ##Staff +Help##=Adding and Spending a Player's XP~>>> This is a purely temporary solution. <<<%r%r[ansi(h, +xp)] : See your own XP, open to all.%r[ansi(h, +xp <player>)] : See <player>'s XP.%r[ansi(h, +xp/add <player>=<amt>)] : Add <amt> to <player>'s total XP.%r[ansi(h, +xp/spend <player>=<amt>)] : "Spend" <amt> of <player>'s XP.%r%rTechnically, this last one subtracts to the offset of the player's XP stat, so it can act a bit touchy. At the moment, you can "give back" Spent XP with a +xp/spend player=-amt.%r%rThis does not increase stats at all. See [ansi(h, +shelp stat)] and use that in conjunction with +xp/spend for now.

*/
